Inline operation with loop
from elections.models.parents import City
[obj.save() for obj in City.objects.all()]


To backup as json
python manage.py dumpdata --exclud=admin --exclude=sessions --exclude=auth.permission --exclude=contenttypes > fixtures/data.json

To reset migrations and database
python manage.py reset
python manage.py reset -hard

python manage.py dumpdata --natural-foreign --natural-primary -e contenttypes -e auth.Permission -e admin.logentry -e sessions.session --indent 4 > .\fixtures\natural.json

Guide For wsgi:
https://modwsgi.readthedocs.io/en/master/user-guides/quick-installation-guide.html

Install Apache2-dev:
sudo apt-get install apache2-dev

Download:
https://github.com/GrahamDumpleton/mod_wsgi/releases

OR
sudo apt-get install libapache2-mod-wsgi

Extract:
tar xvfz mod_wsgi-X.Y.tar.gz

Configure:
./configure --with-python=/usr/bin/python3

Make:
make
sudo make install

Include in apache2:
Add following line at the end of /etc/apache2/apache2.conf
LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so

Restart:
sudo apachectl restart
sudo apachectl stop
sudo apachectl start


sudo apt-get install postgresql postgresql-contrib libpq-dev
sudo apt install curl
curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
sudo apt install pgadmin4-desktop

sudo -u postgres psql

CREATE USER jang WITH PASSWORD '';
ALTER USER jang WITH SUPERUSER;
\password jang user_name;
create database dbname;
GRANT ALL PRIVILEGES ON DATABASE dbname TO username;

change
local   all             all                                     peer
to
local   all             all                                     md5
sudo systemctl restart postgresql


heroku pg:reset DATABASE --app news92
heroku run python manage.py reset --app news92


Guide to deploy python site at apache
https://studygyaan.com/django/how-to-setup-django-applications-with-apache-and-mod-wsgi-on-ubuntu

sudo apt-get update
sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3

sudo apt-get install python3-venv

python3 -m venv /path/to/virtual_env_for_my_site
source /path/to/virtual_env_for_my_site/bin/activate

pip install -r requirements.txt

sudo nano /etc/apache2/sites-available/my_site.conf

<VirtualHost *:80>
	ServerAdmin admin@my_site.com
	ServerName my_site.com
	ServerAlias www.my_site.com
	DocumentRoot /path/to/python-site
	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/access.log combined

	#only for django
	Alias /static /path/to/python-site/static
	<Directory /path/to/python-site/static>
		Require all granted
	</Directory>

	#only for django
	Alias /static /path/to/python-site/media
	<Directory /path/to/python-site/media>
		Require all granted
	</Directory>

	<Directory /path/to/python-site/main_app>
		<Files wsgi.py>
			Require all granted
		</Files>
	</Directory>

	WSGIDaemonProcess process_group_name python-path=/path/to/python-site python-home=/path/to/python-site/env
	WSGIProcessGroup process_group_name
	WSGIScriptAlias / /path/to/python-site/main_app/wsgi.py
</VirtualHost>


cd /etc/apache2/sites-available
sudo a2ensite my_site.conf

Permissions
sudo chown :www-data /path/to/python-site

#do following to add ur domain only, if cloud-flare is not attached
sudo nano /etc/hosts
127.0.0.1 my_site.com

#Only For Sqlite
sudo chmod 664 /path/to/python-site/db.sqlite3
sudo chown :www-data /path/to/python-site/db.sqlite3

#only for django => In Django Project add following to settings.py
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'my_site.com']


Config Test:
sudo apache2ctl configtest

sudo service apache2 restart

./manage.py shell
>>> from django.contrib.auth.hashers import make_password
>>> make_password('my password')
store it in fixtures

